ylab(paste("Average", i)) + xlab("Cluster")
}
grid.arrange(grobs = histo_viz, nrow = 3, ncol = 3,
top = "Histograms to visualize data ranges" )
c %*% w
x
mean(x[,1])
x[,1]
mean(x[,1])
x
c %*% w
x
w
t(w)
scale(x)
scale(x)
x
scale(x)
t(w) %*% scale(x)
scale(x)
t(w)
scale(x)
scale(x, scale = FALSE)
mean(x[,1])
x
scale(x, scale = FALSE)
t(w) %*% scale(x, scale = FALSE)
t(w) * scale(x, scale = FALSE)
pca_model$loadings[1:9,1:9]
w
t(w)
pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
pca_model$scores %>% as.data.frame() %>% as.matrix() %>% round(1)
inv(w)
solve(w)
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
solve(w)
solve(w) %*% c
c
c
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
c
olve(w)
solve(w)
w
t(w) %*% c
t(w
t(w)
t(w)
c
t(w) %*% t(c)
scale(x, scale = FALSE)
t(w) %*% t(c)
t(w) %*% t(c)
t(w) %*% t(c) %>% t()
scale(x)
t(w) %*% t(c) %>% t()
scale(x)
t(w) %*% t(c) %>% t() - scale(x)
mean(x)
colmean(x)
data <- iris
cor(data[,1:4])
iris_pca <- princomp(data[,1:4], cor = TRUE)
summary(iris_pca, loadings = TRUE, scores = TRUE)
# (summary(iris_pca, loadings = TRUE, scores = TRUE) %>% .$sdev)^2
# summary give SD, which when squared matches the eigen value seen in sas
plot(iris_pca$scores[,1], iris_pca$scores[,2])
library(tidyverse)
bind_cols(data, as.data.frame(iris_pca$scores[,1])) %>%
bind_cols(as.data.frame(iris_pca$scores[,2])) %>%
ggplot(aes(iris_pca$scores[,1], iris_pca$scores[,2])) + geom_point(aes(color = Species))
iris_pca$scores
bind_cols(data, as.data.frame(iris_pca$scores[,1])) %>%
bind_cols(as.data.frame(iris_pca$scores[,2]))
summ <- summary(iris_pca, loadings = TRUE, scores = TRUE)
summ$loadings
Get eigen value and eigen vector of a matrix
If there exists a square matrix called A, a scalar λ, and a non-zero vector v, then λ is the eigenvalue and v is the eigenvector if the following equation is satisfied:
$A v =\lambda v$, $(A-\lambda*I)v = 0$
```{r}
identity_a <- matrix(c(1, 0, 0, 1), 2, 2)
matrix_a <- matrix(c(2, 1, 1, 2), 2, 2, byrow = TRUE)
matrix_eigen <- eigen(matrix_a)
matrix_eigen$vectors
matrix_eigen$values
```
PCA
```{r}
data <- iris
cor(data[,1:4])
iris_pca <- princomp(data[,1:4], cor = TRUE)
summ <- summary(iris_pca, loadings = TRUE, scores = TRUE)
# (summary(iris_pca, loadings = TRUE, scores = TRUE) %>% .$sdev)^2
# summary give SD, which when squared matches the eigen value seen in sas
plot(iris_pca$scores[,1], iris_pca$scores[,2])
library(tidyverse)
bind_cols(data, as.data.frame(iris_pca$scores[,1])) %>%
bind_cols(as.data.frame(iris_pca$scores[,2])) %>%
ggplot(aes(iris_pca$scores[,1], iris_pca$scores[,2])) + geom_point(aes(color = Species))
summ
summ
summ$loadings
summ$loadings[1:4,1:4]
summ$loadings[1:2,1:2]
summ$loadings
summ$loadings[1:2,1:2]
summ$loadings[1:4,1:2]
summ$loadings
summ$loadings[1:4,1:2]
data <- iris
scale(data)
data <- iris[,1:4]
data
scale(data)
summ$loadings[1:4,1:2] %.% scale(data)
summ$loadings[1:4,1:2] %*% scale(data)
scale(data)
summ$loadings[1:4,1:2]
(summ$loadings[1:4,1:2] %>% t()) %*% scale(data)
(summ$loadings[1:4,1:2] %>% t())
scale(data)
scale(data)
scale(data) %*%  (summ$loadings[1:4,1:2] %>% t())
scale(data)
(summ$loadings[1:4,1:2] %>% t())
scale(data) %*%  (summ$loadings[1:4,1:2])
scale(data) %*%  (summ$loadings[1:4,1:2]) %>% plot()
data <- iris[,1:4]
cor(data[,1:4])
iris_pca <- princomp(data[,1:4], cor = TRUE)
summ <- summary(iris_pca, loadings = TRUE, scores = TRUE)
# (summary(iris_pca, loadings = TRUE, scores = TRUE) %>% .$sdev)^2
# summary give SD, which when squared matches the eigen value seen in sas
plot(iris_pca$scores[,1], iris_pca$scores[,2])
library(tidyverse)
bind_cols(data, as.data.frame(iris_pca$scores[,1])) %>%
bind_cols(as.data.frame(iris_pca$scores[,2])) %>%
ggplot(aes(iris_pca$scores[,1], iris_pca$scores[,2])) + geom_point(aes(color = Species))
plot(iris_pca$scores[,1], iris_pca$scores[,2])
scale(data) %*%  (summ$loadings[1:4,1:2]) %>% plot()
x <- data[,1:9] %>% as.matrix()
library(tidyverse) # The gasoline for the CaR
library(cluster) # Cluster Analysis
library(factoextra) # Visualizing Clusters
library(plotly) # Interactive Plots
library(gridExtra) # Plot graphs in grids
library(DT) # Print HTML Tables
library(knitr) # Generating HTML document
library(rmdformats) # Document theme
# Globally controlling code blocks
opts_chunk$set(message = FALSE,
warning = FALSE,
fig.align = "center",
fig.height = 4,
fig.width = 6)
# DT::datatable parameters
options(DT.options = list(paging = FALSE, # disable pagination
scrollY = "200px", # enable vertical scrolling
scrollX = TRUE, # enable horizontal scrolling
scrollCollapse = TRUE,
# autoWidth = TRUE, # centering the table output
ordering = FALSE, # disable sorting data
dom = "t"))  # display just the table
data <- read.table("https://raw.githubusercontent.com/mr-hn/kmeans-pca/master/european_jobs.txt",
header = TRUE, sep = "\t")
data_definitition <- data.frame(variable = colnames(data),
description = c("Name of the country",
"Percentage employed in agriculture",
"Percentage employed in mining",
"Percentage employed in manufacturing",
"Percentage employed in power supply industries",
"Percentage employed in construction",
"Percentage employed in service industries",
"Percentage employed in finance",
"Percentage employed in social and personal services",
"Percentage employed in transport and communications"))
data_definitition %>% datatable(caption = "Variable Descriptions")
rownames(data) <- data[,"Country"]
data <- data[,-1]
data %>% datatable(caption = "The Raw Data")
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
# K-Means requires data to be scaled normally N(0,1).
# This is to make Euclidean distance measurement comparable.
data_scaled <- scale(data) %>% as.data.frame()
# Country code is combined to plot on map
country_code <- read_csv("country_code.csv") %>%
rename(country = "COUNTRY", code = "CODE")
data_kmeans <- data_scaled %>% rownames_to_column("country") %>%
left_join(country_code, by = "country")
# Combining the results of K-Means algorithm
data_kmeans$k <- 0
data_kmeans$cluster <- 0
# Into geo_data
geo_data <- NULL
for (i in 2:7) {
kmeans_model <- kmeans(data_scaled, i, nstart = 25)
data_kmeans$cluster <- kmeans_model$cluster
data_kmeans$k <- i
geo_data <- geo_data %>% bind_rows(data_kmeans)
}
# Drop unnecessary columns
geo_data <- geo_data %>% select(country, code, k, cluster)
# Change data structure for Plotly
geo_data_played <- geo_data %>% spread(k, cluster, sep = "value")
geo_colnames <- colnames(geo_data_played)
# Plotluy Chloropleth settings
l <- list(color = toRGB("grey"), width = 0.5)
g <- list(showframe = FALSE,
# lonaxis = list(range = c(-20, 50)),
# lataxis = list(range = c(30, 90)),
lonaxis = list(range = c(-10, 50)),
lataxis = list(range = c(30, 80)),
showcoastlines = FALSE,
projection = list(type = 'Mercator'))
# Build plot with data for two clusters visible
geo_plot <- geo_data_played %>% plot_geo() %>%
add_trace(z = ~kvalue2, color = ~kvalue2,
text = ~country, locations = ~code,
marker = list(line = l), showscale = FALSE) %>%
colorbar(title = "Scale") %>%
layout(geo = g,
title = "Countries grouped based on employment",
annotations = list(x = 0, y = 1, text = "Change clusters in dropdown",
showarrow = FALSE, xref = "paper", yref = "paper"))
# Add plots for clusters 3:7 invisible
for (col in geo_colnames[4:8]) {
geo_plot <- geo_plot %>%
add_trace(z = geo_data_played[[col]], color = geo_data_played[[col]],
text = ~country, locations = ~code,
marker = list(line = l), showscale = FALSE, visible = FALSE)
}
# Add dropdown for clusters and set corresponding visibility
geo_plot %>%
layout(
updatemenus = list(
list(y = 0.9, x = 0.08,
buttons = list(
list(method = "restyle",
args = list("visible", list(TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)),
label = "2"),
list(method = "restyle",
args = list("visible",list(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE)),
label = "3"),
list(method = "restyle",
args = list("visible", list(FALSE, FALSE, TRUE, FALSE, FALSE, FALSE)),
label = "4"),
list(method = "restyle",
args = list("visible", list(FALSE, FALSE, FALSE, TRUE, FALSE, FALSE)),
label = "5"),
list(method = "restyle",
args = list("visible", list(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE)),
label = "6"),
list(method = "restyle",
args = list("visible", list(FALSE, FALSE, FALSE, FALSE, FALSE, TRUE)),
label = "7")
)))) %>%
config(displayModeBar = FALSE)
plot1 <- fviz_nbclust(data_scaled, kmeans, method = "wss") +
ggtitle("By Elbow Method") + xlab("") + theme(text = element_text(size = 8))
plot2 <- fviz_nbclust(data_scaled, kmeans, method = "silhouette") +
ggtitle("By Silhouette Method") + xlab("") + theme(text = element_text(size = 8))
set.seed(1804)
gap_stat <- clusGap(data_scaled, FUN = kmeans, nstart = 25, K.max = 12, B = 50)
plot3 <- fviz_gap_stat(gap_stat) +
ggtitle("By Gap Statistic") + xlab("") + theme(text = element_text(size = 8))
grid.arrange(plot1, plot2, plot3, nrow = 2, ncol = 2)
data$cluster <- kmeans(data_scaled, 3, nstart = 25)$cluster %>% as.numeric()
data %>% rownames_to_column("country") %>%
ggplot(aes(x = reorder(country, cluster), color = as.factor(cluster))) +
geom_text(aes(y = 1),label = rownames(data)) +
coord_flip() + theme_minimal() +
theme(legend.position = "none", axis.ticks = element_blank(), axis.text = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank())
pca_model <- princomp(data[1:9], cor = TRUE) %>% summary(loadings = TRUE)
eigen_values <- pca_model$sdev^2
pca_model$sdev %>% as.data.frame() %>% rownames_to_column("component") %>%
bind_cols(eigen_value = round(sqrt(eigen_values), 3),
proportion = round(eigen_values/sum(eigen_values), 3),
cumulative = round(cumsum(eigen_values)/sum(eigen_values), 3)) %>%
select(component, eigen_value, proportion, cumulative) %>%
datatable(caption = "Eigen Values of Principal Component Analysis")
pca_model$scores %>% as.data.frame() %>% rownames_to_column("country") %>%
bind_cols(data) %>% select(Comp.1, Comp.2, Comp.3, cluster, country) %>%
rename("component_1" = Comp.1, "component_2" = Comp.2, "component_3" = Comp.3) %>%
plot_ly(x = ~component_1, y = ~component_2, z = ~component_3, color = ~cluster,
hoverinfo = "text", mode = "markers",
text = ~paste(country, "\n",
"Component 1 =", round(component_1, 3),"\n",
"Component 2 =", round(component_2, 3),"\n",
"Component 3 =", round(component_3, 3),"\n")) %>%
add_markers() %>% hide_colorbar() %>%
layout(scene = list(xaxis = list(title = 'Component 1'),
yaxis = list(title = 'Component 2'),
zaxis = list(title = 'Component 3'),
camera = list(eye = list(x = 1, y = -1, z = 1),
up = list(x = 0, y = 0, z = 1))),
title = "Data plotted against the three principal components")
x <- data[,1:9] %>% as.matrix()
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
t(w) %*% scale(x, scale = FALSE)
x <- data[,1:9] %>% as.matrix()
scale(x) %*% (w)
c
scale(x) %*% (w) - c
w
pca_model$loadings
pca_model$scores
w
w <- pca_model$loadings[1:9,1:3] %>% as.data.frame() %>%  as.matrix()
scale(x) %*% (w) - c
w
scale(x)
w
scale(x)
w
scale(x) %*% (w)
c
scale(x) %*% (w) -c[1:9,1:3]
c[1:9,1:3]
scale(x) %*% (w) - c[1:9,1:3]
scale(x) %*% (w) - (c[1:9,1:3])
(c[1:9,1:3])
scale(x) %*% (w)
scale(x) %*% (w) - (c[1:26,1:3])
scale(x) %*% (w) - (c[1:26,1:3]) %>% mean()
(scale(x) %*% (w) - (c[1:26,1:3])) %>% mean()
c[1:26,1:3]
scale(x)
c[1:26,1:3]
w
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
w
3
w
c[1:26,1:3] %*% solve(w)
solve(w)
w <- pca_model$loadings[1:9,1:3] %>% as.data.frame() %>%  as.matrix()
solve(w)
c[1:26,1:9] %*% solve(w)
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
c[1:26,1:9] %*% solve(w)
c[1:26,1:9] %*% solve(w) -  scale(x)
(c[1:26,1:9] %*% solve(w) -  scale(x) ) %>% mean(x)
(c[1:26,1:9] %*% solve(w) -  scale(x) ) %>% mean()
x <- data[,1:9] %>% as.matrix()
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
# X times w is c
scale(x) %*% (w) - c[1:26,1:9]
# C times w inverse = x
c[1:26,1:9] %*% solve(w) -  scale(x)
# C times w inverse = x
c[1:26,1:9] %*% solve(w) -  scale(x)
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
c
x <- data[,1:9] %>% as.matrix()
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
# X times w is c
scale(x) %*% (w) - c
# C times w inverse = x
c[1:26,1:9] %*% solve(w) -  scale(x)
# X times w is c
scale(x) %*% (w) - c
# C times w inverse = x
c %*% solve(w) -  scale(x)
x <- data[,1:9] %>% as.matrix() %>% scale()
c <- pca_model$scores %>% as.data.frame() %>% as.matrix()
w <- pca_model$loadings[1:9,1:9] %>% as.data.frame() %>%  as.matrix()
# X times w is c
x %*% (w) - c
# C times w inverse = x
c %*% solve(w) - x
# X times w is c
x %*% (w) - c
# C times w inverse = x
c %*% solve(w) - x
# C times w inverse = x
c %*% t(w) - x
# C times w inverse = x
c %*% solve(w) - x
# Original data times w is c
x %*% w - c
# C times w inverse = x
c %*% t(w) - x
w %*% t(w)
w %*% t(w) %>% round(1)
install.packages("MASS")
library(tidyverse) # The gasoline for the CaR
library(cluster) # Cluster Analysis
library(factoextra) # Visualizing Clusters
library(plotly) # Interactive Plots
library(gridExtra) # Plot graphs in grids
library(shiny) # Center Plotly charts
library(DT) # Print HTML Tables
library(knitr) # Generating HTML document
library(rmdformats) # Document theme
# Globally controlling code blocks
opts_chunk$set(message = FALSE,
warning = FALSE,
fig.align = "center",
fig.height = 4,
fig.width = 6)
# DT::datatable parameters
options(DT.options = list(paging = FALSE, # disable pagination
scrollY = "200px", # enable vertical scrolling
scrollX = TRUE, # enable horizontal scrolling
scrollCollapse = TRUE,
# autoWidth = TRUE, # centering the table output
ordering = FALSE, # disable sorting data
dom = "t"))  # display just the table
data <- read.table("https://raw.githubusercontent.com/mr-hn/kmeansPca/master/european_jobs.txt",
header = TRUE, sep = "\t")
data_definitition <- data.frame(variable = colnames(data),
description = c("Name of the country",
"Percentage employed in agriculture",
"Percentage employed in mining",
"Percentage employed in manufacturing",
"Percentage employed in power supply industries",
"Percentage employed in construction",
"Percentage employed in service industries",
"Percentage employed in finance",
"Percentage employed in social and personal services",
"Percentage employed in transport and communications"))
data_definitition %>% datatable(caption = "Variable Descriptions")
rownames(data) <- data[,"Country"]
data <- data[,-1]
data %>% datatable(caption = "The Raw Data")
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
# line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 170, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
colors = "red",
line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
gather(data ,"industry","percentage") %>%
plot_ly(x = ~industry, y = ~percentage, type = "box",
hoverinfo = "text",
text = ~paste0(rownames(data), " - ", percentage,"%"),
colors = "red",
# line = list(color = "rgb(159, 33, 66)"),
marker = list(color = "rgb(33, 17, 3)")) %>%
layout(title = "Distribution of employments in different sectors - Europe, 1980\'s",
xaxis = list(title = "Industries"),
yaxis = list(title = "")) %>%
config(displayModeBar = F)
